## 냅색 알고리즘(knapsack)
## 대표 문제: 백준 12865 배낭 문제

n = int(input())
lst = [list(map(int, input().split())) for _ in range(n)]

dp = [0] * (n+1) # 0~n
for i in range(n):
    for j in range(i+lst[i][0], n+1): # 상담 끝나는 날부터 끝까지
        if dp[j] < dp[i] + lst[i][1]: # 상담 추가 될 때마다 중복되지 않게 할 수 있는 이전 상담 금액 추가
            dp[j] = dp[i] + lst[i][1]
    print(dp)
print(dp[-1])

## input
# 7
# 3 10
# 5 20
# 1 10
# 1 20
# 2 15
# 4 40
# 2 200

## output 
# [0, 0, 0, 10, 10, 10, 10, 10]
# [0, 0, 0, 10, 10, 10, 20, 20]
# [0, 0, 0, 10, 10, 10, 20, 20]
# [0, 0, 0, 10, 30, 30, 30, 30]
# [0, 0, 0, 10, 30, 30, 45, 45]
# [0, 0, 0, 10, 30, 30, 45, 45]
# [0, 0, 0, 10, 30, 30, 45, 45]
# 45